# -*- coding: utf-8 -*-
"""Amazon_DataGenerator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GNvoxP273qSNMV1DWot4btwNqgghivSP
"""



import requests
from bs4 import BeautifulSoup
import random
import time

url = 'https://www.amazon.in/s?k=noise+cancellation+headphones'

headers = {
    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 13_1) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.1 Safari/605.1.15',
    'Accept-Language': 'da, en-gb, en',
    'Accept-Encoding': 'gzip, deflate, br',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
    'Referer': 'https://www.google.com/'
}

response = requests.get(url, headers=headers)

if response.status_code == 200:
    soup = BeautifulSoup(response.content, 'html.parser')

    products = soup.find_all('div', {'data-component-type': 's-search-result'})

    for product in products:
        title_tag = product.find('span', {'class': 'a-size-medium'})
        title = title_tag.get_text(strip=True) if title_tag else 'N/A'
        print('Product Title:', title)

        price_tag = product.find('span', {'class': 'a-offscreen'})
        price = price_tag.get_text(strip=True) if price_tag else 'N/A'
        print('Product Price:', price)

        rating_tag = product.find('span', {'class': 'a-icon-alt'})
        rating = rating_tag.get_text(strip=True) if rating_tag else 'N/A'
        print('Product Rating:', rating)

        review_count_tag = product.find('span', {'class': 'a-size-base s-underline-text'})
        review_count = review_count_tag.get_text(strip=True) if review_count_tag else 'N/A'
        print('Number of Reviews:', review_count)

        print('-' * 40)
else:
    print('Failed to retrieve the page')

# To avoid being blocked, wait a random amount of time between requests
time.sleep(random.uniform(1, 10))

import json

url = 'https://www.amazon.in/s?k=noise+cancellation+headphones'

headers = {
    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 13_1) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.1 Safari/605.1.15',
    'Accept-Language': 'da, en-gb, en',
    'Accept-Encoding': 'gzip, deflate, br',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
    'Referer': 'https://www.google.com/'
}

response = requests.get(url, headers=headers)

if response.status_code == 200:
    soup = BeautifulSoup(response.content, 'html.parser')

    products = soup.find_all('div', {'data-component-type': 's-search-result'})

    product_list = []

    for product in products:
        title_tag = product.find('span', {'class': 'a-size-medium'})
        title = title_tag.get_text(strip=True) if title_tag else 'N/A'

        price_tag = product.find('span', {'class': 'a-offscreen'})
        price = price_tag.get_text(strip=True) if price_tag else 'N/A'

        rating_tag = product.find('span', {'class': 'a-icon-alt'})
        rating = rating_tag.get_text(strip=True) if rating_tag else 'N/A'

        review_count_tag = product.find('span', {'class': 'a-size-base s-underline-text'})
        review_count = review_count_tag.get_text(strip=True) if review_count_tag else 'N/A'

        product_data = {
            'title': title,
            'price': price,
            'rating': rating,
            'review_count': review_count
        }

        product_list.append(product_data)

    with open('amazon_products.json', 'w', encoding='utf-8') as f:
        json.dump(product_list, f, ensure_ascii=False, indent=4)

    print('JSON file created successfully.')
else:
    print('Failed to retrieve the page')

# To avoid being blocked, wait a random amount of time between requests
time.sleep(random.uniform(1, 10))

